name: MSPOC Workflow

on:
  push:
    branches: [ master, feature/** ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  OUTPUT_PATH: ${{ github.workspace}}/.output

jobs:
#################################################################################################
###   MSPOC.CATALOG.SERVICE   ###################################################################
#################################################################################################
  CI_CATALOG-SERVICE:
    runs-on: ubuntu-latest
    
    env:
      PROJECT_NAME: MSPOC.Catalog.Service
      SOLUTION_PATH: ./MSPOC.Catalog.Service

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
      
    - name: Build
      run: dotnet build --no-restore ${{ env.SOLUTION_PATH }}
      
    - name: Test
      run: dotnet test --no-build --verbosity normal ${{ env.SOLUTION_PATH }}
        
    - name: Publish
      run: dotnet publish ${{ env.SOLUTION_PATH }} --configuration Release --output ${{ env.OUTPUT_PATH }}
    
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v2.3.1
      with:
       name: ${{ env.PROJECT_NAME }}.zip
       path: ${{ env.OUTPUT_PATH }}

  CD_CATALOG-SERVICE:
    needs: [CI_CATALOG-SERVICE]
    runs-on: ubuntu-latest
    
    env:
      PROJECT_NAME: MSPOC.Catalog.Service
      SOLUTION_PATH: ./MSPOC.Catalog.Service
      DOCKER_IMAGE: ggodoi1986/MSPOC.Catalog.Service

    steps:      
      - name: Docker Login
        uses: docker/login-action@v1.13.0
        with:
          username: ${{ secrets.DOCKERHUB_LOGIN }}
          password: ${{ secrets.DOCKERHUB_PWD }}
      
      - name: Docker Build and Push
        uses: docker/build-push-action@v2.9.0
        with:
          context: ${{ env.SOLUTION_PATH }}
          file: ${{ env.SOLUTION_PATH }}/Dockerfile
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:v${{ github.run_number }}
#          tags: |
#            ${{ env.DOCKER_IMAGE }}:latest
#            ${{ env.DOCKER_IMAGE }}:v${{ github.run_number }}
  
#################################################################################################
###   MSPOC.CUSTOMER.SERVICE   ##################################################################
#################################################################################################

  CI_CUSTOMER-SERVICE: 
    runs-on: ubuntu-latest
    
    env:
      PROJECT_NAME: MSPOC.Customer.Service
      SOLUTION_PATH: ./MSPOC.Customer.Service

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
      
    - name: Build
      run: dotnet build --no-restore ${{ env.SOLUTION_PATH }}
      
    - name: Test
      run: dotnet test --no-build --verbosity normal ${{ env.SOLUTION_PATH }}
        
    - name: Publish
      run: dotnet publish ${{ env.SOLUTION_PATH }} --configuration Release --output ${{ env.OUTPUT_PATH }}
    
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v2.3.1
      with:
       name: ${{ env.PROJECT_NAME }}.zip
       path: ${{ env.OUTPUT_PATH }}

  CD_CUSTOMER-SERVICE:
    needs: [CI_CUSTOMER-SERVICE]
    runs-on: ubuntu-latest

    steps:
      - name: Push DockerHub
        run: echo Hello, world!

#################################################################################################
###   MSPOC.ORDER.SERVICE   #####################################################################
#################################################################################################
 
  CI_ORDER-SERVICE: 
    runs-on: ubuntu-latest
    
    env:
      PROJECT_NAME: MSPOC.Order.Service
      SOLUTION_PATH: ./MSPOC.Order.Service

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
      
    - name: Build
      run: dotnet build --no-restore ${{ env.SOLUTION_PATH }}
      
    - name: Test
      run: dotnet test --no-build --verbosity normal ${{ env.SOLUTION_PATH }}
        
    - name: Publish
      run: dotnet publish ${{ env.SOLUTION_PATH }} --configuration Release --output ${{ env.OUTPUT_PATH }}
    
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v2.3.1
      with:
       name: ${{ env.PROJECT_NAME }}.zip
       path: ${{ env.OUTPUT_PATH }}

  CD_ORDER-SERVICE:
    needs: [CI_ORDER-SERVICE]
    runs-on: ubuntu-latest

    steps:
      - name: Push DockerHub
        run: echo Hello, world!
